#!/bin/bash

#--------------------------------------------------------------
#                                                              
#   qsub -v PROJECT="<name>",S=<1,2,3>,nELEM=<integer> script.pbs                                                                  
#                  @FrancescoScarfato                                    
#--------------------------------------------------------------

#PBS -q studenti
#PBS -l nodes=8:ppn=8
#PBS -o $PROJECT.out
#PBS -e $PROJECT.err

sort -u $PBS_NODEFILE > hostlist

PBS_O_WORKDIR=$PBS_O_HOME/$PROJECT
/usr/lib64/openmpi/1.4-gcc/bin/mpicc -lm -o $PBS_O_WORKDIR/$PROJECT $PBS_O_WORKDIR/$PROJECT.c

export LC_NUMERIC=C

t1=0
efficiency=0

printf '%-15s%-15s%-20s%-20s%-15s%-15s\n' 'Input' 'Strategy type' 'Processors number' 'Time (average)' 'Speed-up' 'Efficiency'

#Nel caso si voglia fare con questi input
#Setta anche opzione del programma da eseguire -n $n
#for n in 1000000 10000000 100000000
#do
   for p in 1 2 4 8
   do
      sum=0
      for (( i=0; i<10; i++ ))
      do
         tmp=$(/usr/lib64/openmpi/1.4-gcc/bin/mpiexec -machinefile hostlist -np $p $PBS_O_WORKDIR/$PROJECT -n $nELEM -s $S | awk '{if (NR == 2) print $4}')
         #echo $tmp
         sum=$(echo "$sum $tmp" | awk '{printf("%.5f", $1+$2)}')
      done

      #echo Somma: $sum
      average=$(echo "$sum" | awk '{printf("%.6f", $1/10)}')
      #echo Media: $average
      
      if [ $p -eq 1 ]; then
         t1=$average
         speedup=1
         efficiency=1
      else
         tp=$average
         speedup=$(echo "$t1 $tp" | awk '{printf("%.6f", $1/$2)}')
         efficiency=$(echo "$speedup $p" | awk '{printf("%.6f", $1/$2)}')
      fi
      printf "%-15d%-15d%-20d%-20.5f%-15.5f%-15.5f\n" "$n" "$S" "$p" "$average" "$speedup" "$efficiency"
   done
#done
